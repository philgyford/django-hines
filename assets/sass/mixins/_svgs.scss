// Use SVGs as background-images, encoding them nicely.
// Based on https://codepen.io/tigt/post/optimizing-svgs-in-data-uris

// We should have a variable $svgs which is a map from svg-name's to svgs.
// e.g.:
//
// $svgs: (
//  chevron: '<svg viewBox="0 0 9.19 15.56"><polygon fill="{COLOR}" points="1.41 15.56 0 14.14 6.36 7.78 0 1.41 1.41 0 9.19 7.78 1.41 15.56"/></svg>'
// );
//
// NOTE: Any strings like {COLOR} or {COLOR2} will be replaced when we use the
// background-svg() mixin.
//
// With that map set up, use like this:
//
// .test {
//   @include background-svg(chevron, '#f00');
// }
//
// That will set the background-image to be an encoded version of the chevron
// svg, with {COLOR} replaced with #f00.
// The $color2 (mapping to {COLOR2} in the svg) is optional.
@use "sass:math";

@mixin background-svg($svg-name, $color: null, $color2: null) {
  $svg: map-get($svgs, $svg-name);

  @if $color {
    $svg: str-replace($svg, "{COLOR}", $color);
  }

  @if $color2 {
    $svg: str-replace($svg, "{COLOR2}", $color2);
  }

  background-image: svg-url($svg);
}

//  Function to create an optimized svg url
//  Version: 1.0.6
// NOTE: str-replace() is not a built in function. It should be defined
// elsewhere in the scss files.
@function svg-url($svg) {
  //
  //  Add missing namespace
  //
  @if not str-index($svg, xmlns) {
    $svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(math.div(str-length($svg), $slice));
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");

    //
    //    The maybe list
    //
    //    Keep size and compile time down
    //    ... only add on documented fail
    //
    //  $chunk: str-replace($chunk, '&', '%26');
    //  $chunk: str-replace($chunk, '|', '%7C');
    //  $chunk: str-replace($chunk, '[', '%5B');
    //  $chunk: str-replace($chunk, ']', '%5D');
    //  $chunk: str-replace($chunk, '^', '%5E');
    //  $chunk: str-replace($chunk, '`', '%60');
    //  $chunk: str-replace($chunk, ';', '%3B');
    //  $chunk: str-replace($chunk, '?', '%3F');
    //  $chunk: str-replace($chunk, ':', '%3A');
    //  $chunk: str-replace($chunk, '@', '%40');
    //  $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
