#!/usr/bin/env bash

# Much of this copied from Nick Janetakis
# https://github.com/nickjj/docker-django-example/blob/main/run

set -eo pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# We need to adjust these when we run tests and coverage:
TEST_ENV_ARGS="DEBUG=FALSE HINES_ROOT_DIR=terry HINES_LOG_LEVEL=CRITICAL"


# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker compose "${DC}" ${TTY} "${@}"
}

function _build_run_down {
  docker compose build
  docker compose run ${TTY} "${@}"
  docker compose down
}

# -----------------------------------------------------------------------------
# Helpers for running commands in the host with uv
# -----------------------------------------------------------------------------

function manage {
  # Run any Django management command
  uv run manage.py "${@}"
}


function runserver {
  # Run the Django development webserver
  uv run python -Wd manage.py runserver 0.0.0.0:8000
}


function djangoq {
  # Run the Django-Q process
  uv run manage.py qcluster
}


function tests {
  # Run the Django tests
  env ${TEST_ENV_ARGS} uv run manage.py test "${@}" --parallel
}


function coverage {
  # Run the tests and generate a coverage report in htmlcov/
  env ${TEST_ENV_ARGS} uv run coverage run --concurrency=multiprocessing manage.py test --parallel
  env ${TEST_ENV_ARGS} uv run coverage combine
  env ${TEST_ENV_ARGS} uv run coverage html
}


# -----------------------------------------------------------------------------
# Helpers for running commands in the Docker container
# -----------------------------------------------------------------------------

function psql {
  # Connect to PostgreSQL with psql
  # shellcheck disable=SC1091
  . .env
 _dc db psql -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" "${@}"
}


# function redis-cli {
#   # Connect to Redis with redis-cli
#   _dc redis redis-cli "${@}"
# }


function yarn:outdated {
  # List any installed yarn packages that are outdated
  _dc yarn outdated
}


function yarn:upgrade {
  # Upgrade yarn dependencies.
  _dc yarn upgrade
}


# function yarn:install {
#   # Install yarn dependencies and write lock file
#   # (untested)
#   _build_run_down webpack yarn install
# }


function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
